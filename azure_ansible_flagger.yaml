- name: AKS Demo Ansible Playbook on Azure Cloud Shell
  hosts: localhost
  vars:
    resource_group_name: adrian-group1
    subscription_id: <sub>
    tenant_id: <tenant>
    contributor_roleid: b24988ac-6180-42a0-ab88-20f7382dd24c
    msi_name: msi3
    vnet_name: adrian-vnet
    vnet_cidr: 10.240.0.0/16
    subnet1_name: adrian-sbt1
    subnet2_name: adrian-sbt2
    subnet3_name: adrian-sbt3
    subnet1_cidr: "10.240.0.0/24"
    subnet2_cidr: "10.240.1.0/24"
    subnet3_cidr: "10.240.2.0/24"
    app_gateway_private_ip: 10.240.2.254
    nginx_private_ip: 10.240.0.254
    dns_name: hynes.pri
    cluster_name: cluster
    location: westeurope
    vm_password: hard2Guess80542
    vm_username: myuser
  tasks:
  - name: Ensure Resource Group
    azure_rm_resourcegroup:
      name: "{{ resource_group_name }}"
      location: "{{ location }}"

  - name: Ensure User MSI
    azure_rm_resource:
      resource_group: "{{ resource_group_name }}"
      provider: ManagedIdentity
      resource_type: userAssignedIdentities
      resource_name: "{{ msi_name }}"
      api_version: '2018-11-30'
      idempotency: yes
      state: present
      body:
        location: "{{ location }}"
    register: usermsi_out

  - name: Sleep for 30 seconds to make sure Msi created
    wait_for:
      timeout: 30
    delegate_to: localhost

  - name: Ensure Role Assignment of User MSI to Contributor
    azure_rm_roleassignment:
      scope: "/subscriptions/{{ subscription_id }}"
      assignee_object_id: "{{ usermsi_out.response.properties.principalId }}"
      role_definition_id:
        "/subscriptions/{{ subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/{{ contributor_roleid }}"

  - name: Ensure VNet
    azure_rm_virtualnetwork:
      resource_group: "{{ resource_group_name }}"
      name: "{{ vnet_name }}"
      address_prefixes_cidr:
        - "{{ vnet_cidr }}"
  - name: Ensure Subnet 1
    azure_rm_subnet:
      resource_group: "{{ resource_group_name }}"
      virtual_network_name: "{{ vnet_name }}"
      name: "{{ subnet1_name }}"
      address_prefix_cidr: "{{ subnet1_cidr }}"
  - name: Ensure Subnet 2
    azure_rm_subnet:
      resource_group: "{{ resource_group_name }}"
      virtual_network_name: "{{ vnet_name }}"
      name: "{{ subnet2_name }}"
      address_prefix_cidr: "{{ subnet2_cidr }}"
  - name: Ensure Subnet 3
    azure_rm_subnet:
      resource_group: "{{ resource_group_name }}"
      virtual_network_name: "{{ vnet_name }}"
      name: "{{ subnet3_name }}"
      address_prefix_cidr: "{{ subnet3_cidr }}"

  - name: Ensure Private DNS
    azure_rm_resource:
      resource_group: "{{ resource_group_name }}"
      provider: Network
      resource_type: privateDnsZones
      resource_name: "{{ dns_name}}"
      api_version: '2018-09-01'
      body:
        location: Global

  - name: Sleep for 30 seconds to make sure private dns created ok
    wait_for:
      timeout: 30
    delegate_to: localhost

  - name: Link private dns to vnet
    azure_rm_resource:
      api_version: '2018-09-01'
      resource_group: "{{ resource_group_name }}"
      provider: network
      resource_type: privatednszones
      resource_name: "{{ dns_name}}"
      subresource:
        - type: virtualnetworklinks
          name: link1
      body:
        location: Global
        properties:
          virtualNetwork:
            id: "/subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group_name }}/providers/Microsoft.Network/virtualNetworks/{{ vnet_name }}"
          registrationEnabled: false


  - name: Ensure AKS Cluster
    azure_rm_resource:
      api_version: '2020-09-01'
      resource_group: "{{ resource_group_name }}"
      provider: ContainerService
      resource_type: managedClusters
      resource_name: "{{ cluster_name }}"
      idempotency: yes
      body:
        {
        "id": "/subscriptions/{{ subscription_id }}/resourcegroups/{{ resource_group_name }}/providers/Microsoft.ContainerService/managedClusters/{{ cluster_name }}",
        "location": "{{ location }}",
        "name": "{{ cluster_name }}",
        "type": "Microsoft.ContainerService/ManagedClusters",
        "properties": {
         "kubernetesVersion": "1.17.13",
         "dnsPrefix": "adrianhynes",
         "agentPoolProfiles": [
          {
           "name": "nodepool1",
           "count": 3,
           "vmSize": "Standard_DS2_v2",
           "osDiskSizeGB": 128,
           "osDiskType": "Managed",
           "vnetSubnetID": "/subscriptions/{{ subscription_id }}/resourceGroups/{{ resource_group_name }}/providers/Microsoft.Network/virtualNetworks/{{ vnet_name }}/subnets/{{ subnet1_name }}",
           "maxPods": 30,
           "type": "VirtualMachineScaleSets",
           "availabilityZones": [
            "1"
           ],
           "orchestratorVersion": "1.17.13",
           "enableNodePublicIP": false,
           "nodeLabels": {},
           "mode": "System",
           "osType": "Linux",
           "nodeImageVersion": "AKSUbuntu-1604-2020.10.28"
          }
         ],
         "linuxProfile": {
          "adminUsername": "azureuser",
          "ssh": {
           "publicKeys": [
            {
             "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCj7MYU2Glrmm5EaOtH5oB98xgSRUuewGBLDTEZzWEVzlCxpGQBwGNbeJhiCCyhYx6hFmNEZKFtGJQudOEl3cVaDRdqiDFgiwrF3frj1OnOP/86bPtayGW7zeStjpBSq2yKQshfzhAcvjAe6MIkebkBPnLToKIKWcJbpHo6s/0dMgjvPCz4aLOle55w6p68Tkklp2AG3Vgirmpm2quB2CqdRZJiQQH7xMjpdLI5eAhWbssE4J4na8aBc1B1nX49LXDQNZ1FS8QaPhhyA5WklAM3cDLwFrDx1A8wFsXqLbh2HUsbvA7XBuEzk395ZhQeS5x1YoMgvg+gJ3N1ZZCZUkTp"
            }
           ]
          }
         },
         "servicePrincipalProfile": {
          "clientId": "msi"
         },
         "addonProfiles": {
          "KubeDashboard": {
           "enabled": false,
           "config": null
          }
         },
         "enableRBAC": true,
         "networkProfile": {
          "networkPlugin": "azure",
          "loadBalancerSku": "standard",
          "loadBalancerProfile": {
           "managedOutboundIPs": {
            "count": 1
           }
          },
          "serviceCidr": "10.0.0.0/16",
          "dnsServiceIP": "10.0.0.10",
          "dockerBridgeCidr": "172.17.0.1/16",
          "outboundType": "loadBalancer"
         },
         "aadProfile": {
          "managed": true,
          "adminGroupObjectIDs": null,
          "tenantID": "{{ tenant_id }}"
         },
         "maxAgentPools": 10
        },
        "identity": {
          "type": "SystemAssigned"
        },
        "sku": {
         "name": "Basic",
         "tier": "Free"
        }
       }
    register: aks


  - name: Create Windows VM
    azure_rm_virtualmachine:
      resource_group: "{{ resource_group_name }}"
      name: vm1
      admin_username: "{{ vm_username }}"
      admin_password: "{{ vm_password }}"
      location: "{{ location }}"
      subnet_name: "{{ subnet2_name }}"
      virtual_network_name: "{{ vnet_name }}"
      vm_size: Standard_DS1_v2
      os_type: Windows
      image:
        offer: WindowsServer
        publisher: MicrosoftWindowsServer
        sku: 2016-Datacenter
        version: latest

  - name: Ensure Cluster System Managed Identity available
    azure_rm_resource_info:
      resource_group: "{{ resource_group_name }}"
      provider: ContainerService
      resource_type: ManagedClusters
      resource_name: "{{ cluster_name }}"
      api_version: '2020-11-01'
    register: system_msi

  - debug:
      var: system_msi.response[0].identity.principalId

  - name: Ensure Role Assignment of Cluster System Managed Identity and Contributor
    azure_rm_roleassignment:
      scope: "/subscriptions/{{ subscription_id }}"
      assignee_object_id: "{{ system_msi.response[0].identity.principalId }}"
      role_definition_id:
        "/subscriptions/{{ subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/{{ contributor_roleid }}"


  - name: Ensure Node Resource Group
    azure_rm_resource_info:
      resource_group: "{{ resource_group_name }}"
      provider: ContainerService
      resource_type: ManagedClusters
      resource_name: "{{ cluster_name }}"
      api_version: '2020-11-01'
    register: nodersggroup
  - debug:
       var: nodersggroup.response[0].properties.nodeResourceGroup



  - name: Get VMScaleSet info
    azure.azcollection.azure_rm_resource_info_rt:
      resource_group: "{{ nodersggroup.response[0].properties.nodeResourceGroup }}"
      provider: compute
      resource_type: virtualmachinescalesets
      api_version: "2017-12-01"
      location: "{{ location }}"
    register: vmssresources
    until: vmssresources.response[0].name is defined
    retries: 20
    delay: 60


  - name: Ensure Assign Identity to VmScalesSet
    shell:
      cmd: "az vmss identity assign -g {{nodersggroup.response[0].properties.nodeResourceGroup }} -n {{ vmssresources.response[0].name }} --identities {{ usermsi_out.response.id }}"
    register: vmssassigndetails

  - debug:
      var: vmssassigndetails



  - name: Login as cluster admin
    shell:
      cmd: "az aks get-credentials --resource-group {{ resource_group_name }} --name {{ cluster_name }} --admin"

  - name: Git clone stable repo on HEAD
    ansible.builtin.git:
      repo: "https://github.com/aido123/ingress-azure.git"
      dest: /tmp/helm_repo/ingress-azure


  - name: Add ingress-nginx helm repo
    community.kubernetes.helm_repository:
      name: ingress-nginx
      repo_url: "https://kubernetes.github.io/ingress-nginx"

  - name: Deploy nginx ingress
    community.kubernetes.helm:
      name: nginx-ingress
      chart_ref: ingress-nginx/ingress-nginx
      release_namespace: default
      values:
        defaultBackend:
          nodeSelector:
            beta.kubernetes.io/os: linux
        controller:
          replicaCount: 2
          metrics:
            enabled: true
          podAnnotations:
            prometheus.io/scrape: true
            prometheus.io/port: 10254
          nodeSelector: 
            beta.kubernetes.io/os: linux
          service:
            loadBalancerIP: "{{ nginx_private_ip }}"
            annotations:
              service.beta.kubernetes.io/azure-load-balancer-internal: "true"


  - name: Create externdal dns service account
    community.kubernetes.k8s:
      state: present
      namespace: default
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: external-dns
  - name: Create external dns cluster role
    community.kubernetes.k8s:
      state: present
      namespace: default
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRole
        metadata:
          name: external-dns
        rules:
        - apiGroups: [""]
          resources: ["services","endpoints","pods"]
          verbs: ["get","watch","list"]
        - apiGroups: ["extensions","networking.k8s.io"]
          resources: ["ingresses"] 
          verbs: ["get","watch","list"]
        - apiGroups: [""]
          resources: ["nodes"]
          verbs: ["list"]
  - name: Create externdal dns cluster role binding
    community.kubernetes.k8s:
      state: present
      namespace: default
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: external-dns-viewer
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: external-dns
        subjects:
        - kind: ServiceAccount
          name: external-dns
          namespace: default
  - name: Create externdal dns deployment
    community.kubernetes.k8s:
      state: present
      namespace: default
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: external-dns
        spec:
          strategy:
            type: Recreate
          selector:
            matchLabels:
              app: external-dns
          template:
            metadata:
              labels:
                app: external-dns
            spec:
              serviceAccountName: external-dns
              containers:
              - name: external-dns
                args:
                - --source=service
                - --source=ingress
                - --domain-filter="{{ dns_name }}"
                - --provider=azure-private-dns
                - --azure-resource-group="{{ resource_group_name }}"
                - --azure-subscription-id="{{ subscription_id }}"
                env:
                - name: AZURE_TENANT_ID
                  value: "{{ tenant_id }}"
                - name: AZURE_CLIENT_ID
                  value: "{{ usermsi_out.response.properties.principalId }}"
                - name: AZURE_SUBSCRIPTION_ID
                  value: "{{ subscription_id }}"
                image: k8s.gcr.io/external-dns/external-dns:v0.7.0
